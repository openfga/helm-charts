replicaCount: 3

image:
  repository: openfga/openfga
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

annotations: {}

podAnnotations: {}

extraEnvVars: []
extraVolumes: []
extraVolumeMounts: []

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## Configure extra options for OpenFGA containers' liveness, readiness and startup probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes

## @param livenessProbe.enabled Enable liveness probes on OpenFGA containers.
## @param livenessProbe.initialDelaySeconds Number of seconds after the container has started before liveness probes are initiated.
## @param livenessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param livenessProbe.timeoutSeconds Number of seconds after which the probe times out.
## @param livenessProbe.failureThreshold Failure threshold for liveness probes.
## @param livenessProbe.successThreshold Success threshold for liveness probes.
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 12
  successThreshold: 1

## @param readinessProbe.enabled Enable readiness probes on OpenFGA containers.
## @param readinessProbe.initialDelaySeconds Number of seconds after the container has started before readiness probes are initiated.
## @param readinessProbe.periodSeconds How often (in seconds) to perform the probe.
## @param readinessProbe.timeoutSeconds Number of seconds after which the probe times out.
## @param readinessProbe.failureThreshold Failure threshold for readiness probes.
## @param readinessProbe.successThreshold Success threshold for readiness probes.
##
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

## @param startupProbe.enabled Enable startup probes on OpenFGA containers.
## @param startupProbe.initialDelaySeconds Number of seconds after the container has started before startup probes are initiated.
## @param startupProbe.periodSeconds How often (in seconds) to perform the probe.
## @param startupProbe.timeoutSeconds Number of seconds after which the probe times out.
## @param startupProbe.failureThreshold Failure threshold for startup probes.
## @param startupProbe.successThreshold Success threshold for startup probes.
##
startupProbe:
  enabled: false
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

## @param customLivenessProbe Overrides the default liveness probe with a custom one.
##
customLivenessProbe: {}

## @param customReadinessProbe Overrides the default readiness probe with a custom one.
##
customReadinessProbe: {}

## @param customStartupProbe Overrides the default startup probe with a custom one.
##
customStartupProbe: {}

service:
  annotations: {}
  type: ClusterIP
  port: 8080

telemetry:
  trace:
    enabled: false
    otlp:
      endpoint:
      tls:
        enabled: false
    sampleRatio:

  metrics:
    ## @param telemetry.metrics.enabled enable/disable prometheus metrics on the '/metrics' endpoint
    ##
    enabled: true

    ## @param telemetry.metrics.addr the host:port address to serve the Metrics server on
    addr: 0.0.0.0:2112

    ## @param telemetry.metrics.enableRPCHistograms enables prometheus histogram metrics for RPC latency distributions
    enableRPCHistograms:

    ## @param telemetry.metrics.podAnnotations [object] Annotations for the Prometheus metrics on etcd pods
    ##
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.containerPorts.prometheus }}"

datastore:
  engine: memory
  uri:
  # A secret containing a "uri" key with the database URI to use.  Use this if you have a
  # password in the URI (for example)
  uriSecret:
  maxCacheSize:
  maxOpenConns:
  maxIdleConns:
  connMaxIdleTime:
  connMaxLifetime:
  applyMigrations: true
  migrations:
    resources: {}
    image:
      repository: groundnuty/k8s-wait-for
      pullPolicy: Always
      tag: "v2.0"
    # The database URI to use for migrations.  If unset, the URI from datastore.uri is used.
    uri:
    # A secret containing a "uri" key with the database URI to use for migrations.  Use this
    # if you have a password in the URI (for example).
    uriSecret:

postgres:
  ## @param postgres.enabled enable the bitnami/postgresql subchart and deploy Postgres
  enabled: false

mysql:
  ## @param mysql.enabled enable the bitnami/mysql subchart and deploy MySQL
  enabled: false

grpc:
  addr: 0.0.0.0:8081
  tls:
    enabled: false
    cert:
    key:

http:
  enabled: true
  addr: 0.0.0.0:8080
  tls:
    enabled: false
    cert:
    key:
  upstreamTimeout:
  corsAllowedOrigins: ["*"]
  corsAllowedHeaders: ["*"]

authn:
  method:
  preshared:
    keys: []
  oidc:
    audience:
    issuer:

playground:
  enabled: true
  port: 3000

profiler:
  enabled: false
  addr: 0.0.0.0:3001

log:
  level: info
  format: json

checkQueryCache:
  enabled: false
  limit:
  ttl:

experimentals: []

maxTuplesPerWrite:
maxTypesPerAuthorizationModel:
maxAuthorizationModelSizeInBytes:
maxConcurrentReadsForCheck:
maxConcurrentReadsForListObjects:
changelogHorizonOffset:
resolveNodeLimit:
resolveNodeBreadthLimit:
listObjectsDeadline:
listObjectsMaxResults:
requestDurationDatastoreQueryCountBuckets: [50, 200]
allowWriting1_0Models:
allowEvaluating1_0Models:

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          # servicePort: 8080
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# @param sidecars Add additional sidecar containers to the pods
# Example:
# sidecars:
#   - name: your-image-name
#     image: your-image
#     imagePullPolicy: Always
#     ports:
#       - name: portname
#         containerPort: 1234
sidecars: []
migrate:
  sidecars: []
  annotations:
    helm.sh/hook: "post-install, post-upgrade, post-rollback, post-delete"
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: "before-hook-creation"
  labels: {}
  extraEnvVars: []
  extraVolumes: []
  extraVolumeMounts: []
  serviceAccount:
    # Specifies whether a separate migration service account should be created
    create: false
    # Annotations to add to the migration service account.  If unset, the annotations
    # from serviceAccount.annotations are used.
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""