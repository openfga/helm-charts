{
    "$schema": "http://json-schema.org/schema#",
    "type": "object",
    "properties": {
        "telemetry": {
            "type": "object",
            "properties": {
                "trace": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "enable tracing",
                            "default": "false"
                        },
                        "otlp": {
                            "type": "object",
                            "properties": {
                                "endpoint": {
                                    "type": ["string", "null"],
                                    "description": "the grpc endpoint of the OpenTelemetry 'otlp' trace collector"
                                },
                                "tls": {
                                    "type": "object",
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean",
                                            "description": "whether to use TLS connection for the trace collector",
                                            "default": false
                                        }
                                    }
                                }
                            }
                        },
                        "sampleRatio": {
                            "type": ["number", "null"],
                            "description": "the fraction of traces to sample. 1 means all, 0 means none.",
                            "default": null
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "enable/disable prometheus metrics on the '/metrics' endpoint",
                            "default": true
                        },
                        "addr": {
                            "type": "string",
                            "description": "the host:port address to serve the prometheus metrics server on",
                            "default": "0.0.0.0:2112"
                        },
                        "enableRPCHistograms": {
                            "type": ["boolean", "null"],
                            "description": "enables prometheus histogram metrics for RPC latency distributions"
                        }
                    }
                }
            }
        },
        "datastore": {
            "type": "object",
            "properties": {
                "engine": {
                    "type": "string",
                    "enum": ["memory", "postgres", "mysql"],
                    "default": "memory"
                },
                "uri": {
                    "type":["string", "null"]
                },
                "uriSecret": {
                    "type":["string", "null"],
                    "description": "the secret name where to get the datastore URI, it expects a key named uri to exist in the secret"
                },
                "maxCacheSize": {
                    "type": ["integer", "null"],
                    "description": "the maximum number of cache keys that the storage cache can store before evicting old keys"
                },
                "maxOpenConns": {
                    "type": ["integer", "null"],
                    "description": "the maximum number of open connections to the datastore"
                },
                "maxIdleConns": {
                    "type": ["integer", "null"],
                    "description": "the maximum number of connections to the datastore in the idle connection pool"
                },
                "connMaxIdleTime": {
                    "type": ["string", "null"],
                    "description": "the maximum amount of time (as a duration) a connection to the datastore may be idle",
                    "format": "duration",
                    "examples": ["30s", "1m", "200ms"]
                },
                "connMaxLifetime": {
                    "type": ["string", "null"],
                    "description": "the maximum amount of time (as a duration) a connection to the datastore may be reused",
                    "format": "duration",
                    "examples": ["30s", "1m", "200ms"]
                },
                "applyMigrations": {
                    "type": "boolean",
                    "description": "enable/disable the job that runs migrations in the datastore",
                    "default": true
                },
                "migrations": {
                    "type": "object",
                    "description": "Additional configuration for the database migration job",
                    "properties": {
                        "resources": {
                            "type": "object",
                            "description": "Kubernetes resource requests and limits for the migration job",
                            "default": {}
                        },
                        "image": {
                            "type": "object",
                            "description": "Image configuration for the migration job",
                            "properties": {
                                "repository": {
                                    "type": "string",
                                    "description": "Container used to wait for migration to complete",
                                    "default": "groundnuty/k8s-wait-for"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "Image tag for the migration job",
                                    "default": "v2.0"
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "Image pull policy for the migration job",
                                    "default": "Always"
                                }
                            }
                        },
                        "uri": {
                            "type":["string", "null"],
                            "description": "the datastore URI to use for migrations"
                        },
                        "uriSecret": {
                            "type":["string", "null"],
                            "description": "the secret name where to get the datastore URI for migrations, it expects a key named uri to exist in the secret"
                        }
                    }
                }
            }
        },
        "postgres": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "enable the bitnami/postgresql subchart and deploy Postgres",
                    "default": false
                }
            }
        },
        "mysql": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "enable the bitnami/mysql subchart and deploy MySQL",
                    "default": false
                }
            }
        },
        "grpc": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string",
                    "description": "the host:port address to serve the grpc server on.",
                    "default": "0.0.0.0:8081"
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "enables or disables transport layer security (TLS)",
                            "default": false
                        },
                        "cert": {
                            "type": ["string", "null"],
                            "description": "the (absolute) file path of the certificate to use for the TLS connection"
                        },
                        "key": {
                            "type": ["string", "null"],
                            "description": "the (absolute) file path of the TLS key that should be used for the TLS connection"
                        }
                    }
                }
            }
        },
        "http": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "enables or disables the OpenFGA HTTP server. If this is set to true then 'grpc.enabled' must be set to true",
                    "default": true
                },
                "addr": {
                    "type": "string",
                    "description": "the host:port address to serve the HTTP server on",
                    "default": "0.0.0.0:8080"
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "enables or disables transport layer security (TLS)",
                            "default": false
                        },
                        "cert": {
                            "type": ["string", "null"],
                            "description": "the (absolute) file path of the certificate to use for the TLS connection"
                        },
                        "key": {
                            "type": ["string", "null"],
                            "description": "the (absolute) file path of the TLS key that should be used for the TLS connection"
                        }
                    }
                },
                "upstreamTimeout": {
                    "type": ["string", "null"],
                    "description": "the timeout duration for proxying HTTP requests upstream to the grpc endpoint.",
                    "format": "duration",
                    "examples": ["5s", "1m", "200ms"]
                },
                "corsAllowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": ["*"]
                },
                "corsAllowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": ["*"]
                }
            }
        },
        "authn": {
            "type": "object",
            "properties": {
                "method": {
                    "type": ["string", "null"],
                    "description": "the authentication method to use",
                    "enum": [null, "none", "preshared", "oidc"]
                },
                "preshared": {
                    "type": "object",
                    "properties": {
                        "keys": {
                            "type": "array",
                            "description": "one or more preshared keys to use for authentication (must be set if `authn.method=preshared')",
                            "items": {
                                "type": "string",
                                "minItems": 1
                            }
                        }
                    }
                },
                "oidc": {
                    "type": "object",
                    "properties": {
                        "audience": {
                            "type": ["string", "null"],
                            "description": "the OIDC 'audience' which tokens will be validated against (must be set if `authn.method=oidc`)"
                        },
                        "issuer": {
                            "type": ["string", "null"],
                            "description": "the OIDC 'issuer' which tokens will be validated against (must be set if `authn.method=oidc`)"
                        }
                    }
                }
            }
        },
        "playground": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "enable/disable the OpenFGA Playground",
                    "default": true
                },
                "port": {
                    "type": "number",
                    "description": "the port to serve the local OpenFGA Playground on",
                    "default": 3000
                }
            }
        },
        "profiler": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "enable/disable pprof profiling",
                    "default": false
                },
                "addr": {
                    "type": "string",
                    "description": "the host:port address to serve the pprof profiler server on",
                    "default": "0.0.0.0:3001"
                }
            }
        },
        "log": {
            "type": "object",
            "properties": {
                "level": {
                    "type": "string",
                    "description": "the log level to set (for production we recommend 'info' level)",
                    "enum": ["debug", "info", "warn", "error", "panic", "fatal"],
                    "default": "info"
                },
                "format": {
                    "type": "string",
                    "description": "the log format to output logs in (for production we recommend 'json' format)",
                    "enum": ["text", "json"],
                    "default": "json"
                }
            }
        },
        "checkQueryCache": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "when executing Check and ListObjects requests, enables caching. This will turn Check and ListObjects responses into eventually consistent responses",
                    "default": "false"
                },
                "limit": {
                    "type": ["integer", "null"],
                    "description": "if caching of Check and ListObjects calls is enabled, this is the size limit (in items) of the cache",
                    "default": "10000"
                },
                "ttl": {
                    "type": ["string", "null"],
                    "description": "if caching of Check and ListObjects is enabled, this is the TTL of each value",
                    "format": "duration",
                    "default": "10s"
                }
            }
        },
        "experimentals": {
            "type": "array",
            "description": "a list of experimental features to enable",
            "default": []
        },
        "maxTuplesPerWrite": {
            "type": ["integer", "null"],
            "description": "the maximum allowed number of tuples per Write transaction"
        },
        "maxTypesPerAuthorizationModel": {
            "type": ["integer", "null"],
            "description": "the maximum allowed number of type definitions per authorization model"
        },
        "maxAuthorizationModelSizeInBytes": {
            "type": ["integer", "null"],
            "description": "the maximum size in bytes allowed for persisting an authorization model"
        },
        "maxConcurrentReadsForCheck": {
            "type": ["integer", "null"],
            "description": "the maximum allowed number of concurrent reads in a single Check query",
            "default": 4294967295
        },
        "maxConcurrentReadsForListObjects": {
            "type": ["integer", "null"],
            "description": "the maximum allowed number of concurrent reads in a single ListObjects query",
            "default": 4294967295
        },
        "changelogHorizonOffset": {
            "type": ["integer", "null"],
            "description": "the offset (in minutes) from the current time - changes that occur after this offset will not be included in the response of ReadChanges."
        },
        "resolveNodeLimit": {
            "type": ["integer", "null"],
            "description": "defines how deeply nested an authorization model can be"
        },
        "resolveNodeBreadthLimit": {
            "type": ["integer", "null"],
            "description": "defines how many nodes on a given level can be evaluated concurrently in a Check resolution tree.",
            "default": 100
        },
        "listObjectsDeadline": {
            "type": ["string", "null"],
            "description": "the timeout deadline (as a duration) for serving ListObjects requests",
            "format": "duration",
            "examples": ["3s", "1m", "200ms"]
        },
        "listObjectsMaxResults": {
            "type": ["integer", "null"],
            "description": "the maximum results to return in ListObjects responses"
        },
        "requestDurationDatastoreQueryCountBuckets": {
            "description": "datastore query count buckets used to label the histogram metric for measuring request duration.",
            "type": "array",
            "items": {
                "minimum": 0,
                "type": "integer"
            },
            "minItems": 1,
            "default": [50, 200]
        },
        "allowWriting1_0Models": {
            "type": ["boolean", "null"],
            "description": "allow calling WriteAuthorizationModel with models that have 1.0 schema version"
        },
        "allowEvaluating1_0Models": {
            "type": ["boolean", "null"],
            "description": "allow calling Check, Expand, ListObjects, Write Assertions with models that have 1.0 schema version"
        },
        "annotations": {
            "type": "object",
            "description": "Map of annotations to add to the deployment's manifest",
            "additionalProperties": { "type": "string" },
            "default": { }
        },
        "podAnnotations": {
            "type": "object",
            "description": "Map of annotations to add to the pods' manifest",
            "additionalProperties": { "type": "string" },
            "default": { }
        },
        "service": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": "Map of annotations to add to the service's manifest",
                    "additionalProperties": { "type": "string" },
                    "default": { }
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "object",
                    "description": "Map of annotations to add to the ingress' manifest",
                    "additionalProperties": { "type": "string" },
                    "default": { }
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable liveness probes on OpenFGA containers."
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "default": 60,
                    "description": "Number of seconds after the container has started before liveness probes are initiated."
                },
                "periodSeconds": {
                    "type": "number",
                    "default": 10,
                    "description": "How often (in seconds) to perform the probe."
                },
                "timeoutSeconds": {
                    "type": "number",
                    "default": 5,
                    "duration": "Number of seconds after which the probe times out."
                },
                "failureThreshold": {
                    "type": "number",
                    "default": 12,
                    "description": "Failure threshold for liveness probes."
                },
                "successThreshold": {
                    "type": "number",
                    "default": 1,
                    "description": "Success threshold for liveness probes."
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable readiness probes on OpenFGA containers."
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "default": 5,
                    "description": "Number of seconds after the container has started before readiness probes are initiated."
                },
                "periodSeconds": {
                    "type": "number",
                    "default": 10,
                    "description": "How often (in seconds) to perform the probe."
                },
                "timeoutSeconds": {
                    "type": "number",
                    "default": 5,
                    "description": "Number of seconds after which the probe times out."
                },
                "failureThreshold": {
                    "type": "number",
                    "default": 6,
                    "description": "Failure threshold for readiness probes."
                },
                "successThreshold": {
                    "type": "number",
                    "default": 1,
                    "description": "Success threshold for readiness probes."
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable startup probes on OpenFGA containers."
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "default": 60,
                    "description": "Number of seconds after the container has started before startup probes are initiated."
                },
                "periodSeconds": {
                    "type": "number",
                    "default": 10,
                    "description": "How often (in seconds) to perform the probe."
                },
                "timeoutSeconds": {
                    "type": "number",
                    "default": 5,
                    "description": "Number of seconds after which the probe times out."
                },
                "failureThreshold": {
                    "type": "number",
                    "default": 30,
                    "description": "Failure threshold for readiness probes."
                },
                "successThreshold": {
                    "type": "number",
                    "default": 1,
                    "description": "Success threshold for readiness probes."
                }
            }
        },
        "customLivenessProbe": {
            "type": "object",
            "default": null,
            "description": "Overrides the default liveness probe with a custom one."
        },
        "customReadinessProbe": {
            "type": "object",
            "default": null,
            "description": "Overrides the default readiness probe with a custom one."
        },
        "customStartupProbe": {
            "type": "object",
            "default": null,
            "description": "Overrides the default startup probe with a custom one."
        },
        "sidecars": {
            "type": "array",
            "description": "add additional sidecar containers to the pods",
            "default": []
        },
        "migrate": {
            "type": "object",
            "properties": {
                "sidecars": {
                    "type": "array",
                    "description": "add additional sidecar containers to the migration job",
                    "default": []
                }
            },
            "annotations": {
                "type": "object",
                "description": "Map of annotations to add to the migration job's manifest",
                "additionalProperties": { "type": "string" },
                "default": { }
            },
            "labels": {
                "type": "object",
                "description": "Map of labels to add to the migration job's manifest",
                "additionalProperties": { "type": "string" },
                "default": { }
            },
            "extraEnvVars": {
                "type": "array",
                "description": "List of additional environment variables to add to the migration job's main container",
                "items": {
                    "type": "object"
                },
                "default": []
            },
            "extraVolumes": {
                "type": "array",
                "description": "List of additional volumes to add to the migration job",
                "items": {
                    "type": "object"
                },
                "default": []
            },
            "extraVolumeMounts": {
                "type": "array",
                "description": "List of additional volumes to add to the migration job",
                "items": {
                    "type": "object"
                },
                "default": []
            },
            "serviceAccount": {
                "type": "object",
                "description": "ServiceAccount to be used for the migration job.  If create or name is not set, it uses the same service acocunt as the deployment",
                "properties": {
                    "create": {
                        "type": "boolean",
                        "description": "Whether to create a ServiceAccount for the migration job",
                        "default": false
                    },
                    "annotations": {
                        "type": "object",
                        "description": "Annotations to add to the ServiceAccount",
                        "additionalProperties": { "type": "string" },
                        "default": { }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ServiceAccount to use.  If not set and create is true, a name is generated using the fullname template",
                        "default": ""
                    }
                }
            }
        },
        "extraEnvVars": {
            "type": "array",
            "description": "List of additional environment variables to add to the deployment's main container",
            "items": {
                "type": "object"
            },
            "default": []
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Lis of additional volumes to add to the deployment",
            "items": {
                "type": "object"
            },
            "default": []
        },
        "extraVolumes": {
            "type": "array",
            "description": "Lis of additional volumes to add to the deployment",
            "items": {
                "type": "object"
            },
            "default": []
        }
    }
}
